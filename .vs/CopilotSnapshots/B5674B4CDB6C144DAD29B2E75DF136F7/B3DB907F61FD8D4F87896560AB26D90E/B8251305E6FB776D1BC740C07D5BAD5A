// common-scripts.js

// グローバルな設定やユーティリティ
const COMMON_SETTINGS = {
  headerId: 'main-header',
  fadeInSelector: '.fade-in-section',
  tiltCardSelector: '.tilt-card-effect',
  currentYearSelector: '#current-year',
  mobileMenuStoreName: 'mobileMenu',
  smoothScrollSelector: 'a[href^="#"]:not([href="#"])',
  scrollToTopSelector: 'a[href="#"]',
};

/**
 * Alpine.jsのストアを初期化
 * - mobileMenu: モバイルメニューの開閉状態を管理
 */
// Alpineの読み込みタイミングに依存しないようにストア登録をラップ
function registerMobileMenuStore() {
  try {
    if (!window.Alpine || !Alpine.store) return;
    // 既に登録済みなら二重登録しない
    if (Alpine.store(COMMON_SETTINGS.mobileMenuStoreName)) return;

    Alpine.store(COMMON_SETTINGS.mobileMenuStoreName, {
      isOpen: false,
      toggle() {
        this.isOpen = !this.isOpen;
        document.body.style.overflow = this.isOpen ? 'hidden' : '';
        const menuButton = document.getElementById('mobile-menu-button-alpine');
        if (menuButton) menuButton.classList.toggle('open', this.isOpen);
      },
      close() {
        this.isOpen = false;
        document.body.style.overflow = '';
        const menuButton = document.getElementById('mobile-menu-button-alpine');
        if (menuButton) menuButton.classList.remove('open');
      }
    });
  } catch (e) {
    console.error('Failed to register Alpine store:', e);
  }
}

// 1) 既にAlpineが存在するなら即時登録
if (window.Alpine) {
  registerMobileMenuStore();
}

// 2) Alpine初期化イベントでも登録（後読みの保険）
document.addEventListener('alpine:init', registerMobileMenuStore);

/**
 * DOMコンテンツが読み込まれた後に初期化処理を実行
 */
document.addEventListener('DOMContentLoaded', () => {
  applySiteSettings(); // サイト設定をAPIから読み込み適用
  applyUnitLogos(); // 各隊ロゴを適用
  initSmoothScroll();
  initFooterYear();
  initIntersectionObserver();
  initHeaderScrollBehavior();
  initTiltEffect();
  initSimpleLightboxPlaceholder();
  initLazyLoadImages(); // 画像の遅延読み込みを初期化

  // --- 特定のページでのみ実行する初期化処理 ---
  if (document.getElementById('hero')) {
  // タイトルアニメはセッション内で1回。サブタイトル/CTAは完了後にふわっと表示。
  let played = false;
  try { played = sessionStorage.getItem('heroAnimPlayed') === '1'; } catch {}
  const subtitle = document.getElementById('hero-subtitle');
  const ctas = document.getElementById('hero-ctas');
  if (!played) {
    try { sessionStorage.setItem('heroAnimPlayed', '1'); } catch {}
    if (subtitle) subtitle.classList.add('fade-hidden');
    if (ctas) ctas.classList.add('fade-hidden');
    if (typeof initHeroTextAnimation === 'function') {
      initHeroTextAnimation('#hero-title', 300, 120, () => {
        if (subtitle) { subtitle.classList.remove('fade-hidden'); subtitle.classList.add('fade-show'); }
        if (ctas) { ctas.classList.remove('fade-hidden'); ctas.classList.add('fade-show'); }
      });
    }
  } else {
    if (subtitle) subtitle.classList.add('fade-show');
    if (ctas) ctas.classList.add('fade-show');
  }
  if (typeof initCounterAnimation === 'function') initCounterAnimation();
}
  if (document.getElementById('activity-log-container')) {
    if (typeof initActivityLogPage === 'function') initActivityLogPage();
  }
  if (document.getElementById('activity-article-container')) {
    if (typeof initActivityDetailPage === 'function') initActivityDetailPage();
  }
  if (document.getElementById('contact-form')) {
    if (typeof initContactForm === 'function') initContactForm();
  }
});


// =========================================================================
// ここから下に関数を実装していきます
// =========================================================================

/**
 * (実装) ヒーローセクションのテキストアニメーション (タイピング風)
 * @param {string} targetSelector - アニメーション対象の要素のCSSセレクタ
 * @param {number} initialDelay - アニメーション開始までの遅延時間(ミリ秒)
 * @param {number} typingSpeed - 一文字あたりのタイピング速度(ミリ秒)
 */
function initHeroTextAnimation(targetSelector, initialDelay = 0, typingSpeed = 100, onComplete) {
  const target = document.querySelector(targetSelector);
  if (!target) return;

  const originalText = target.innerHTML.replace(/<br\s*\/?>(?=\s*|$)/g, '\n').trim();
  target.textContent = '';
  target.classList.add('typing-container');
  target.style.whiteSpace = 'pre-wrap';

  let i = 0;
  const type = () => {
    if (i < originalText.length) {
      if (originalText.charAt(i) === '\n') {
        target.innerHTML += '<br>';
      } else {
        target.textContent += originalText.charAt(i);
      }
      i++;
      setTimeout(type, typingSpeed);
    } else {
      target.classList.remove('typing-container');
      try { if (typeof onComplete === 'function') onComplete(); } catch {}
    }
  };

  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        setTimeout(type, initialDelay);
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.5 });

  observer.observe(target);
}

/**
 * (実装) 数字のカウンターアニメーション
 */
function initCounterAnimation() {
  const counters = document.querySelectorAll('.counter');
  if (counters.length === 0) return;

  const animateCounter = (counter) => {
    const target = +counter.getAttribute('data-target');
    const duration = 2000; // 2秒でアニメーション
    const stepTime = Math.abs(Math.floor(duration / (target || 1)));

    let count = 0;
    const updateCount = () => {
      count++;
      counter.innerText = count;
      if (count < target) {
        setTimeout(updateCount, stepTime);
      } else {
        counter.innerText = target; // 最終値をセット
      }
    };
    updateCount();
  };

  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        animateCounter(entry.target);
        observer.unobserve(entry.target); // 一度だけ実行
      }
    });
  }, { threshold: 0.7 });

  counters.forEach(counter => {
    counter.innerText = '0'; // 初期値を0に
    observer.observe(counter);
  });
}


/**
 * (実装) 活動記録一覧ページの初期化
 * dynamic-activities.jsの `loadActivityLog` 関数を呼び出すことを想定
 */
function initActivityLogPage() {
    console.log("活動記録一覧ページを初期化します。");
    // `dynamic-activities.js` に `loadActivityLog` 関数が定義されている場合
    if (typeof loadActivityLog === 'function') {
        loadActivityLog();
    } else if (typeof loadDynamicActivityList === 'function') {
        loadDynamicActivityList();
    } else {
        console.warn('`loadActivityLog`関数が`dynamic-activities.js`に見つかりません。');
    }
}

/**
 * (実装) 活動記録詳細ページの初期化
 * dynamic-activities.jsの `loadActivityDetail` 関数を呼び出すことを想定
 */
function initActivityDetailPage() {
    console.log("活動記録詳細ページを初期化します。");
    // `dynamic-activities.js` に `loadActivityDetail` 関数が定義されている場合
    if (typeof loadActivityDetail === 'function') {
        loadActivityDetail();
    } else if (typeof loadDynamicActivityDetail === 'function') {
        loadDynamicActivityDetail();
    } else {
        console.warn('`loadActivityDetail`関数が`dynamic-activities.js`に見つかりません。');
    }
}


/**
 * 各隊ロゴをタスク指定URLに差し替え
 * - index.html のユニット紹介カード最上部の円形画像
 * - 各 unit-*.html の冒頭「隊章」画像
 */
function applyUnitLogos() {
  try {
    const logos = {
      beaver: 'https://drive.usercontent.google.com/uc?export=view&id=1LKO_6YETXriZEw4xvUl7JwPEI0D98kuC',
      cub: 'https://drive.usercontent.google.com/uc?export=view&id=1RvqNJOEjG-OXUeydNNuqX2nf81Jz2db7',
     

